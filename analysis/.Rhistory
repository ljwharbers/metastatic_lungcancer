profiles = merge(profiles, clusters[, .(SequenceName, subclone)], by.x = "sample_id", by.y = "SequenceName")
med_profiles = profiles[, round(median(total_cn)), by = .(subclone, chrom, start, end)]
# Dcast
med_profiles = dcast(med_profiles, chrom + start + end ~ subclone)
# Reorder
setnames(med_profiles, "chrom", "chr")
med_profiles[, chr := as.numeric(gsub("chr", "", chr))]
setorder(med_profiles, chr, start)
plotHeatmap(med_profiles[, 4:ncol(med_profiles)], med_profiles[, 1:3], linesize = 7)
clusters[, .N, by = subclone]
## Load/install packages
packages = c("data.table", "ggtree", "tidytree", "treeio")
sapply(packages, require, character.only = T)
source("/mnt/AchTeraD/Documents/R-functions/save_and_plot.R")
source("/mnt/AchTeraD/Documents/Projects/scCUTseq/Scripts/plotHeatmap.R")
profiles = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/input/P3_500kb.tsv")
tree = read.tree("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/output/P3_500kb/P3_500kb_final_tree.new")
clusters = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/test_p3.txt")
clusters[, ClusterNumber := as.factor(ClusterNumber)]
# Min cluster size
n_clusters = clusters[, .N, by = ClusterNumber]
clusters = merge(clusters, n_clusters)
clusters[, subclone := ifelse(N >= 10, ClusterNumber, "-1")]
tree_data = tree %>% as.treedata %>% as_tibble
tree_data = full_join(tree_data, clusters, by = c("label" = "SequenceName"))
tree_data = as.treedata(tree_data)
# Plot2
plt = ggtree(tree_data, aes(color = subclone, label = subclone)) +
theme_tree() +
geom_tiplab2(aes(label = subclone)) +
geom_rootedge() +
annotate("text", x = -2, y = 2.4, label = "Diploid")
# Get average profiles
profiles = merge(profiles, clusters[, .(SequenceName, subclone)], by.x = "sample_id", by.y = "SequenceName")
med_profiles = profiles[, round(median(total_cn)), by = .(subclone, chrom, start, end)]
# Dcast
med_profiles = dcast(med_profiles, chrom + start + end ~ subclone)
# Reorder
setnames(med_profiles, "chrom", "chr")
med_profiles[, chr := as.numeric(gsub("chr", "", chr))]
setorder(med_profiles, chr, start)
plotHeatmap(med_profiles[, 4:ncol(med_profiles)], med_profiles[, 1:3], linesize = 7)
## Load/install packages
packages = c("data.table", "ggtree", "tidytree", "treeio")
sapply(packages, require, character.only = T)
source("/mnt/AchTeraD/Documents/R-functions/save_and_plot.R")
source("/mnt/AchTeraD/Documents/Projects/scCUTseq/Scripts/plotHeatmap.R")
profiles = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/input/P3_500kb.tsv")
tree = read.tree("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/output/P3_500kb/P3_500kb_final_tree.new")
clusters = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/test_p3.txt")
clusters[, ClusterNumber := as.factor(ClusterNumber)]
# Min cluster size
n_clusters = clusters[, .N, by = ClusterNumber]
clusters = merge(clusters, n_clusters)
clusters[, subclone := ifelse(N >= 10, ClusterNumber, "-1")]
tree_data = tree %>% as.treedata %>% as_tibble
tree_data = full_join(tree_data, clusters, by = c("label" = "SequenceName"))
tree_data = as.treedata(tree_data)
# Plot2
plt = ggtree(tree_data, aes(color = subclone, label = subclone)) +
theme_tree() +
geom_tiplab2(aes(label = subclone)) +
geom_rootedge() +
annotate("text", x = -2, y = 2.4, label = "Diploid")
# Get average profiles
profiles = merge(profiles, clusters[, .(SequenceName, subclone)], by.x = "sample_id", by.y = "SequenceName")
med_profiles = profiles[, round(median(total_cn)), by = .(subclone, chrom, start, end)]
# Dcast
med_profiles = dcast(med_profiles, chrom + start + end ~ subclone)
# Reorder
setnames(med_profiles, "chrom", "chr")
med_profiles[, chr := as.numeric(gsub("chr", "", chr))]
setorder(med_profiles, chr, start)
plotHeatmap(med_profiles[, 4:ncol(med_profiles)], med_profiles[, 1:3], linesize = 7)
clusters[, .N, by = subclone]
profiles = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/input/P3_500kb.tsv")
tree = read.tree("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/output/P3_500kb/P3_500kb_final_tree.new")
clusters = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/test_p3.txt")
clusters[, ClusterNumber := as.factor(ClusterNumber)]
# Min cluster size
n_clusters = clusters[, .N, by = ClusterNumber]
clusters = merge(clusters, n_clusters)
clusters[, subclone := ifelse(N >= 5, ClusterNumber, "-1")]
tree_data = tree %>% as.treedata %>% as_tibble
tree_data = full_join(tree_data, clusters, by = c("label" = "SequenceName"))
tree_data = as.treedata(tree_data)
# Plot2
plt = ggtree(tree_data, aes(color = subclone, label = subclone)) +
theme_tree() +
geom_tiplab2(aes(label = subclone)) +
geom_rootedge() +
annotate("text", x = -2, y = 2.4, label = "Diploid")
# Get average profiles
profiles = merge(profiles, clusters[, .(SequenceName, subclone)], by.x = "sample_id", by.y = "SequenceName")
med_profiles = profiles[, round(median(total_cn)), by = .(subclone, chrom, start, end)]
# Dcast
med_profiles = dcast(med_profiles, chrom + start + end ~ subclone)
# Reorder
setnames(med_profiles, "chrom", "chr")
med_profiles[, chr := as.numeric(gsub("chr", "", chr))]
setorder(med_profiles, chr, start)
plotHeatmap(med_profiles[, 4:ncol(med_profiles)], med_profiles[, 1:3], linesize = 7)
plt
plt
files = list.files("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/")
files
## Load/install packages
packages = c("data.table")
sapply(packages, require, character.only = T)
source("/mnt/AchTeraD/Documents/R-functions/save_and_plot.R")
files = list.files("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/")
files
## Load/install packages
packages = c("data.table", "pbapply")
sapply(packages, require, character.only = T)
files = list.files("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/")
profiles = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/input/P3_500kb.tsv")
tree = read.tree("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/output/P3_500kb/P3_500kb_final_tree.new")
file = files[1]
clusters = fread(file)
files = list.files("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/", full.names = T)
file = files[1]
clusters = fread(file)
clusters
basename(file)
gsub("P3_|.txt", "", basename(file))
clusters = fread(file)
clusters[, ClusterNumber := as.factor(ClusterNumber)]
# Min cluster size
n_clusters = clusters[, .N, by = ClusterNumber]
clusters = merge(clusters, n_clusters)
clusters[, subclone := ifelse(N >= 5, ClusterNumber, "-1")]
tree_data = tree %>% as.treedata %>% as_tibble
tree_data = full_join(tree_data, clusters, by = c("label" = "SequenceName"))
tree_data = as.treedata(tree_data)
# Plot2
plt = ggtree(tree_data, aes(color = subclone, label = subclone)) +
theme_tree() +
geom_tiplab2(aes(label = subclone)) +
geom_rootedge() +
annotate("text", x = -2, y = 2.4, label = "Diploid")
files = list.files("/mnt/AchTeraD/Documents/Projects/scCUTseq/TreeCluster/clusters/", full.names = T)
profiles = fread("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/input/P3_500kb.tsv")
tree = read.tree("/mnt/AchTeraD/Documents/Projects/scCUTseq/medicc2/output/P3_500kb/P3_500kb_final_tree.new")
clusters = fread(file)
clusters[, ClusterNumber := as.factor(ClusterNumber)]
# Min cluster size
n_clusters = clusters[, .N, by = ClusterNumber]
clusters = merge(clusters, n_clusters)
clusters[, subclone := ifelse(N >= 5, ClusterNumber, "-1")]
tree_data = tree %>% as.treedata %>% as_tibble
tree_data = full_join(tree_data, clusters, by = c("label" = "SequenceName"))
tree_data = as.treedata(tree_data)
# Plot2
plt = ggtree(tree_data, aes(color = subclone, label = subclone)) +
theme_tree() +
geom_tiplab2(aes(label = subclone)) +
geom_rootedge() +
annotate("text", x = -2, y = 2.4, label = "Diploid")
BiocManager::install("GenVisR")
devtools::install_github("https://github.com/cran/FField")
BiocManager::install("GenVisR")
require(GenVisR)
data = fread("./data/WES/chasm_allLUADLUSCGBMLGG.tsv", skip = "UID")
cosmic = fread("./data/cosmicplus.tsv")
annot = fread("./data/patient_annotation/full-table_hq_wes.csv", select = c(1, 5))
# Select which model to use
model = "all"
# Rename dataframe columns
data = data[, c(8, 10, 14, 18:19, 22:23, 26:27, 30:31, 34:35)]
# Change column names to be easier to handle
setnames(data, c("gene", "variant_class", "sample",
"pvalue_chasmplus_all", "score_chasmplus_all",
"pvalue_chasmplus_GBM", "score_chasmplus_GBM",
"pvalue_chasmplus_LGG", "score_chasmplus_LGG",
"pvalue_chasmplus_LUAD", "score_chasmplus_LUAD",
"pvalue_chasmplus_LUSC", "score_chasmplus_LUSC"))
greps = grepl(paste0("gene|variant_class|sample|", model), colnames(data))
data = data[, ..greps]
colnames(data) = gsub(paste0("_chasmplus_|_chasmplus_", model), "", colnames(data))
# Subselect data based on having P-Value and for genes in cosmic
data = data[!is.na(pvalue)]
# Set pvalue of 0 to 1e-8 because that is the lower bound CHASM used for significance
data[pvalue == 0, pvalue := 1e-08]
data[, padj := p.adjust(pvalue, method = "BH")]
# Split rows where there are multiple samples
data = separate_rows(data, sample, sep = ";", convert = F)
setDT(data)
# Get gene medians for ordering
data[, median := median(padj), by = gene]
setorder(data, median)
data[, gene := factor(gene, levels = unique(gene))]
# Specify significance threshold
threshold = 0.05
# Subset data to only rows of putative driver mutations in the selected genes
dt = data[padj < threshold, c("gene", "sample", "padj")]
# Set variant classes based on significance
dt[, variant_class := "padj"]
v_order = c("padj")
# Set annotations
annot$Filename <- factor(annot$Filename, levels = annot$Filename)
# Remove MN38 and MN22
annot = annot[!annot$Filename == "MN38",]
annot = annot[!annot$Filename == "MN22",]
# Melt
annot = melt(annot, id.vars = "Filename")
setnames(annot, "Filename", "sample")
# Plot waterfall plot to get sample order
plt_data <- waterfall(as.data.frame(dt), fileType = "custom", variant_class_order = v_order,
plotSamples = unique(annot$sample), plotMutBurden = F,
mainPalette = viridis(1, direction = -1), mainGrid = T, clinData = annot,
clinVarOrder = c("ADENOCARCINOMA", "SQUAMOUS CELL CARCINOMA"),
clinVarCol = viridis(2, begin = 0.2), mainDropMut = F, out = "data")
new_dt = merge(plt_data$main, dt[, 1:3])
plt = ggplot(new_dt, aes(x = sample, y = gene, fill = padj)) +
geom_tile() +
geom_vline(xintercept = seq(1.5, nlevels(unique(new_dt$sample))), size = .1) +
geom_hline(yintercept = seq(1.5, nlevels(unique(new_dt$gene))), size = .1) +
scale_fill_viridis(direction = -1, begin = 0.3, end = 0.9) +
scale_x_discrete(drop = F) +
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
options(width = 28)
require(data.table)
require(ggplot2)
require(cowplot)
require(scales)
require(dplyr)
require(biomaRt)
require(ggpubr)
require(ggsci)
require(RColorBrewer)
require(ComplexHeatmap)
require(ggdendro)
require(karyoploteR)
require(naturalsort)
require(GenomicRanges)
require(viridis)
require(ggrepel)
require(MutationalPatterns)
require(BSgenome.Hsapiens.UCSC.hg19)
require(GenVisR)
require(clusterProfiler)
require(enrichplot)
require(org.Hs.eg.db)
require(tidyr)
theme_set(theme_cowplot())
data = fread("./data/WES/chasm_allLUADLUSCGBMLGG.tsv", skip = "UID")
cosmic = fread("./data/cosmicplus.tsv")
annot = fread("./data/patient_annotation/full-table_hq_wes.csv", select = c(1, 5))
# Select which model to use
model = "all"
# Rename dataframe columns
data = data[, c(8, 10, 14, 18:19, 22:23, 26:27, 30:31, 34:35)]
# Change column names to be easier to handle
setnames(data, c("gene", "variant_class", "sample",
"pvalue_chasmplus_all", "score_chasmplus_all",
"pvalue_chasmplus_GBM", "score_chasmplus_GBM",
"pvalue_chasmplus_LGG", "score_chasmplus_LGG",
"pvalue_chasmplus_LUAD", "score_chasmplus_LUAD",
"pvalue_chasmplus_LUSC", "score_chasmplus_LUSC"))
greps = grepl(paste0("gene|variant_class|sample|", model), colnames(data))
data = data[, ..greps]
colnames(data) = gsub(paste0("_chasmplus_|_chasmplus_", model), "", colnames(data))
# Subselect data based on having P-Value and for genes in cosmic
data = data[!is.na(pvalue)]
# Set pvalue of 0 to 1e-8 because that is the lower bound CHASM used for significance
data[pvalue == 0, pvalue := 1e-08]
data[, padj := p.adjust(pvalue, method = "BH")]
# Split rows where there are multiple samples
data = separate_rows(data, sample, sep = ";", convert = F)
setDT(data)
# Get gene medians for ordering
data[, median := median(padj), by = gene]
setorder(data, median)
data[, gene := factor(gene, levels = unique(gene))]
# Specify significance threshold
threshold = 0.05
# Subset data to only rows of putative driver mutations in the selected genes
dt = data[padj < threshold, c("gene", "sample", "padj")]
# Set variant classes based on significance
dt[, variant_class := "padj"]
v_order = c("padj")
# Set annotations
annot$Filename <- factor(annot$Filename, levels = annot$Filename)
# Remove MN38 and MN22
annot = annot[!annot$Filename == "MN38",]
annot = annot[!annot$Filename == "MN22",]
# Melt
annot = melt(annot, id.vars = "Filename")
setnames(annot, "Filename", "sample")
# Plot waterfall plot to get sample order
plt_data <- waterfall(as.data.frame(dt), fileType = "custom", variant_class_order = v_order,
plotSamples = unique(annot$sample), plotMutBurden = F,
mainPalette = viridis(1, direction = -1), mainGrid = T, clinData = annot,
clinVarOrder = c("ADENOCARCINOMA", "SQUAMOUS CELL CARCINOMA"),
clinVarCol = viridis(2, begin = 0.2), mainDropMut = F, out = "data")
new_dt = merge(plt_data$main, dt[, 1:3])
plt = ggplot(new_dt, aes(x = sample, y = gene, fill = padj)) +
geom_tile() +
geom_vline(xintercept = seq(1.5, nlevels(unique(new_dt$sample))), size = .1) +
geom_hline(yintercept = seq(1.5, nlevels(unique(new_dt$gene))), size = .1) +
scale_fill_viridis(direction = -1, begin = 0.3, end = 0.9) +
scale_x_discrete(drop = F) +
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
setwd("/mnt/AchTeraD/Documents/Projects/LungCancer/manuscript/repository/analysis/")
source("~/.active-rstudio-document", echo=TRUE)
plt
new_dt
annot
dt = merge(new_dt, annot)
dt
class(dt)
setDT(dt)
dt[ .N, by = .(gene, )]
dt
dt[ .N, by = .(gene, value)]
dt
View(dt)
annot
dt
dt[ .N, by = .(gene, value)]
dt[, .N, by = .(gene, value)]
dt[subtype == "SQUAMOUS CELL CARCINOMA", freq := N / 13 * 100]
dt[subtype == "ADENOCARCINOMA", freq := N / 27 * 100]
dt[value == "SQUAMOUS CELL CARCINOMA", freq := N / 13 * 100]
dt[value == "ADENOCARCINOMA", freq := N / 27 * 100]
dt
dt = dt[, .N, by = .(gene, value)]
dt[value == "SQUAMOUS CELL CARCINOMA", freq := N / 13 * 100]
dt[value == "ADENOCARCINOMA", freq := N / 27 * 100]
dt
View(dt)
8/13
validation = readRDS("./data/BM-50kb_CNA-geneoverlaps-cosmicplus.rds")
validation
annot = "./data/patient_annotation/BM_annot.tsv"
annot
annot = fread("./data/patient_annotation/BM_annot.tsv")
annot
annot[, sample := gsub("MN", "BM_", V1)]
annot[, sample := gsub("B", "", sample)]
annot
annot[, sample := gsub("MN|B", "", V1)]
annot
annot[, sample := paste0("BM_", sample)]
annot
dt = merge(validation, annot)
dt
uniqueN(dt$sample)
annot
annot = fread("./data/patient_annotation/BM_annotations_selection.csv")
annot
dt = merge(validation, annot, by.x = "sample", by.y = "sample_id")
dt
annot[, .N, by = subtype]
dt[, .N, by = .(gebe, subtype)]
dt[, .N, by = .(gene, subtype)]
dt = dt[, .N, by = .(gene, subtype)]
dt[subtype == "SQCC", freq := N / 23 * 100]
dt[subtype == "Adeno", freq := N / 61 * 100]
View(dt)
total = fread("./data/gene-panel/filtered_muts_full.tsv")
annot = fread("./data/patient_annotation/genepanel_sample_annot.txt", header = F)
bm_annot = fread("./data/patient_annotation/BM_annot.tsv")
# Keep only adeno/squamous
annot = merge(bm_annot, annot, by.x = "V1", by.y = "V2")
total
annot
dt = merge(total, annot, by.x = "sample", by.y = "V1")
dt
dt = unique(dt, by = c("sample, gene"))
dt = unique(dt, by = c("sample", "gene"))
dt
dt[, .N, by = .(gene, subtype)]
dt[, .N, by = .(gene, V5)]
dt
dt = dt[, .N, by = .(gene, V5)]
dt
annot
annot[, .N, by = V5]
dt[V5 == "ADENOCARCINOMA", freq := N / 83 * 100]
dt[V5 == "SQUAMOUS CELL CARCINOMA", freq := N / 32 * 100]
View(dt)
# Load in all cohorts
discovery = readRDS("./data/full-cohort-50kb_CNA-geneoverlaps-cosmicplus.rds")
validation = readRDS("./data/BM-50kb_CNA-geneoverlaps-cosmicplus.rds")
tcga_files = list.files("./data/tcga/", full.names = TRUE)
drivers = fread("./data/putative-drivers_chasm_deltalog_gistic.tsv")
drivers = drivers[grepl("gist", dataset)]
# Set N per cohort
disc_n = 51
val_n = 84
# Select genes that are in putative driver list
primary = discovery[gene %in% drivers$gene & !grepl("b", sample)]
discovery = discovery[gene %in% drivers$gene & grepl("b", sample)]
validation = validation[gene %in% drivers$gene]
# Get counts
prim_count = primary[, .N, by = .(CNA, gene)]
disc_count = discovery[, .N, by = .(CNA, gene)]
val_count = validation[, .N, by = .(CNA, gene)]
# Fill missing genes
tofill = data.table(gene = c(drivers$gene, drivers$gene),
CNA = c(rep("AMP", length(drivers$gene)), rep("DEL", length(drivers$gene))),
N = 0)
prim_count = rbind(prim_count, tofill)
disc_count = rbind(disc_count, tofill)
val_count = rbind(val_count, tofill)
# Unique and sum
prim_count = prim_count[, .(primary = sum(N) / disc_n), by = .(CNA, gene)]
disc_count = disc_count[, .(discovery = sum(N) / disc_n), by = .(CNA, gene)]
val_count = val_count[, .(validation = sum(N) / val_n), by = .(CNA, gene)]
# merge
counts = merge(disc_count, val_count, id.vars = c("CNA", "gene"))
counts_inclprim = merge(counts, prim_count, id.vars = c("CNA", "gene"))
# Plot
plt25 = ggplot(counts, aes(x = discovery, y = validation, color = CNA)) +
geom_point(size = 3) +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_continuous(labels = scales::percent_format()) +
scale_color_brewer(palette = "Set1") +
labs(y = "Validation", x = "Discovery") +
stat_cor(data = counts, aes(x = discovery, y = validation), inherit.aes = F) +
geom_smooth(method = "lm", se = F, linetype = 2, color = "red", size = 2)
counts_inclprim_m = melt(counts_inclprim, id.vars = c("CNA", "gene"))
# TCGA
# Read in each file and get frequency of deletions/amplifications per gene for TCGA dataset
tcga_files = tcga_files[grepl("luad|lusc", tcga_files)]
cnas_tcga = lapply(tcga_files, function(file) {
x = fread(file)
dels = rowSums(x[, 3:ncol(x)] < -1) / (ncol(x) -2)
amps = rowSums(x[, 3:ncol(x)] > 1) / (ncol(x) -2)
data = data.table(gene = x[[1]], CNA = c(rep("AMP", length(amps)), rep("DEL", length(dels))), frequency = c(amps, dels), subtype = gsub(".*/|-data_CNA.txt", "", file))
data = data[gene %in% drivers$gene]
return(data)
})
# Select genes
cnas_tcga = rbindlist(cnas_tcga)
# Plot without subtype
cnas_tcga_all = cnas_tcga[, .(tcga = sum(frequency)), by = .(gene, CNA)]
counts_all = merge(counts_inclprim, cnas_tcga_all, id.vars = c("CNA", "gene"))
counts_all_m = melt(counts_all, id.vars = c("CNA", "gene"))
# Get factor levels
totals = counts_all_m[, sum(value), by = gene]
setorder(totals, -V1)
counts_all_m[, gene := factor(gene, levels = totals$gene)]
plt26 = ggplot(counts_all_m, aes(x = gene, y = value, fill = variable)) +
geom_col(position = "dodge") +
scale_fill_npg() +
scale_y_continuous(expand = c(0, 0), labels = scales::percent_format()) +
labs(y = "Percentage of samples with gene alteration", x = "Gene", fill = "Cohort") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
plt26
View(counts_all_m)
discovery
View(discovery[, .N, by = gene])
# Load in all cohorts
discovery = readRDS("./data/full-cohort-50kb_CNA-geneoverlaps-cosmicplus.rds")
validation = readRDS("./data/BM-50kb_CNA-geneoverlaps-cosmicplus.rds")
tcga_files = list.files("./data/tcga/", full.names = TRUE)
drivers = fread("./data/putative-drivers_chasm_deltalog_gistic.tsv")
drivers = drivers[grepl("gist", dataset)]
# Set N per cohort
disc_n = 51
val_n = 84
# Select genes that are in putative driver list
primary = discovery[gene %in% drivers$gene & !grepl("b", sample)]
discovery = discovery[gene %in% drivers$gene & grepl("b", sample)]
validation = validation[gene %in% drivers$gene]
# Get counts
prim_count = primary[, .N, by = .(CNA, gene)]
disc_count = discovery[, .N, by = .(CNA, gene)]
val_count = validation[, .N, by = .(CNA, gene)]
# Fill missing genes
tofill = data.table(gene = c(drivers$gene, drivers$gene),
CNA = c(rep("AMP", length(drivers$gene)), rep("DEL", length(drivers$gene))),
N = 0)
prim_count = rbind(prim_count, tofill)
disc_count = rbind(disc_count, tofill)
val_count = rbind(val_count, tofill)
# Unique and sum
prim_count = prim_count[, .(primary = sum(N) / disc_n), by = .(CNA, gene)]
disc_count = disc_count[, .(discovery = sum(N) / disc_n), by = .(CNA, gene)]
val_count = val_count[, .(validation = sum(N) / val_n), by = .(CNA, gene)]
prim_count
View(prim_count)
require(data.table)
source("/mnt/AchTeraD/Documents/R-functions/save_and_plot.R")
# Load in data
data = readRDS("./data/full_cohort_50kb_CNAinformation.rds")
annotation = fread("./data/patient_annotation/paired_cohort_annotation.csv")
genomesize = readRDS("./data/full_cohort_50kb.rds")$MN1
genomesize = genomesize[, sum(end-start)]
# Merge data with annotation
data = merge(data, annotation, by.x = "sample", by.y = "Filename")
data[, location := ifelse(grepl("b", sample), "BM", "NSCLC")]
data[, location := factor(location, levels = c("NSCLC", "BM"))]
data[, sample := gsub("b", "", sample)]
# Get percentage and number of SCNAs per patient
percentage_altered = data[, .(percentage = sum(length) / genomesize * 100), by = .(CNA, sample, subtype, location)]
number_altered = data[, .N, by = .(CNA, sample, subtype, location)]
# Plot
plt1 = ggplot(percentage_altered, aes(x = location, y = percentage, color = CNA)) +
facet_wrap(~subtype) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = .15)) +
scale_color_brewer(palette = "Set1") +
labs(y = "% of genome with SCNAs", x = "")
